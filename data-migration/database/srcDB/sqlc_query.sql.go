// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sqlc_query.sql

package srcDB

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllIds = `-- name: GetAllIds :many
SELECT id FROM processed_questions
`

func (q *Queries) GetAllIds(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBatchProcessedQuestions = `-- name: GetBatchProcessedQuestions :many
SELECT id, title, question, multiple_choices, correct_answer, explanation, keywords
FROM processed_questions
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetBatchProcessedQuestionsParams struct {
	Limit  int32
	Offset int32
}

type GetBatchProcessedQuestionsRow struct {
	ID              int32
	Title           string
	Question        string
	MultipleChoices string
	CorrectAnswer   string
	Explanation     pgtype.Text
	Keywords        pgtype.Text
}

func (q *Queries) GetBatchProcessedQuestions(ctx context.Context, arg GetBatchProcessedQuestionsParams) ([]GetBatchProcessedQuestionsRow, error) {
	rows, err := q.db.Query(ctx, getBatchProcessedQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBatchProcessedQuestionsRow
	for rows.Next() {
		var i GetBatchProcessedQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Question,
			&i.MultipleChoices,
			&i.CorrectAnswer,
			&i.Explanation,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessedQuestion = `-- name: GetProcessedQuestion :one
SELECT id, title, question, multiple_choices, correct_answer, explanation, keywords
FROM processed_questions
`

type GetProcessedQuestionRow struct {
	ID              int32
	Title           string
	Question        string
	MultipleChoices string
	CorrectAnswer   string
	Explanation     pgtype.Text
	Keywords        pgtype.Text
}

func (q *Queries) GetProcessedQuestion(ctx context.Context) (GetProcessedQuestionRow, error) {
	row := q.db.QueryRow(ctx, getProcessedQuestion)
	var i GetProcessedQuestionRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Question,
		&i.MultipleChoices,
		&i.CorrectAnswer,
		&i.Explanation,
		&i.Keywords,
	)
	return i, err
}

const getProcessedQuestionsInBatch = `-- name: GetProcessedQuestionsInBatch :many
SELECT id, title, question, multiple_choices, correct_answer, explanation, keywords
FROM processed_questions
WHERE id = ANY($1::int[])
`

type GetProcessedQuestionsInBatchRow struct {
	ID              int32
	Title           string
	Question        string
	MultipleChoices string
	CorrectAnswer   string
	Explanation     pgtype.Text
	Keywords        pgtype.Text
}

func (q *Queries) GetProcessedQuestionsInBatch(ctx context.Context, dollar_1 []int32) ([]GetProcessedQuestionsInBatchRow, error) {
	rows, err := q.db.Query(ctx, getProcessedQuestionsInBatch, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProcessedQuestionsInBatchRow
	for rows.Next() {
		var i GetProcessedQuestionsInBatchRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Question,
			&i.MultipleChoices,
			&i.CorrectAnswer,
			&i.Explanation,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
