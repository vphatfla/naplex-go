// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sqlc_query.sql

package srcDB

import (
	"context"
)

const getBatchProcessedQuestions = `-- name: GetBatchProcessedQuestions :many
SELECT id, title, question, multiple_choices, correct_answer, explanation, keywords
FROM processed_questions
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetBatchProcessedQuestionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetBatchProcessedQuestions(ctx context.Context, arg GetBatchProcessedQuestionsParams) ([]ProcessedQuestion, error) {
	rows, err := q.db.Query(ctx, getBatchProcessedQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessedQuestion
	for rows.Next() {
		var i ProcessedQuestion
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Question,
			&i.MultipleChoices,
			&i.CorrectAnswer,
			&i.Explanation,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessedQuestion = `-- name: GetProcessedQuestion :one
SELECT id, title, question, multiple_choices, correct_answer, explanation, keywords
FROM processed_questions
`

func (q *Queries) GetProcessedQuestion(ctx context.Context) (ProcessedQuestion, error) {
	row := q.db.QueryRow(ctx, getProcessedQuestion)
	var i ProcessedQuestion
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Question,
		&i.MultipleChoices,
		&i.CorrectAnswer,
		&i.Explanation,
		&i.Keywords,
	)
	return i, err
}
