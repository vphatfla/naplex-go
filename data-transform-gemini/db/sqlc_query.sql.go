// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sqlc_query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countRawQuestion = `-- name: CountRawQuestion :one
SELECT COUNT(id) FROM raw_questions
`

func (q *Queries) CountRawQuestion(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countRawQuestion)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProcessedQuestionByID = `-- name: GetProcessedQuestionByID :one
SELECT id, title, question, multiple_choices, correct_answer, explanation, keywords FROM processed_questions WHERE id = $1
`

func (q *Queries) GetProcessedQuestionByID(ctx context.Context, id int32) (ProcessedQuestion, error) {
	row := q.db.QueryRow(ctx, getProcessedQuestionByID, id)
	var i ProcessedQuestion
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Question,
		&i.MultipleChoices,
		&i.CorrectAnswer,
		&i.Explanation,
		&i.Keywords,
	)
	return i, err
}

const getRawQuestionByID = `-- name: GetRawQuestionByID :one
SELECT id, title, raw_question, link FROM raw_questions
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetRawQuestionByID(ctx context.Context, id int32) (RawQuestion, error) {
	row := q.db.QueryRow(ctx, getRawQuestionByID, id)
	var i RawQuestion
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.RawQuestion,
		&i.Link,
	)
	return i, err
}

const getRawQuestionWithRange = `-- name: GetRawQuestionWithRange :many
SELECT id, title, raw_question, link FROM raw_questions
WHERE id >= $1 AND id <= $2
`

type GetRawQuestionWithRangeParams struct {
	ID   int32
	ID_2 int32
}

func (q *Queries) GetRawQuestionWithRange(ctx context.Context, arg GetRawQuestionWithRangeParams) ([]RawQuestion, error) {
	rows, err := q.db.Query(ctx, getRawQuestionWithRange, arg.ID, arg.ID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RawQuestion
	for rows.Next() {
		var i RawQuestion
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.RawQuestion,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProcessedQuestion = `-- name: InsertProcessedQuestion :one
INSERT INTO processed_questions (title, question, multiple_choices, correct_answer, explanation, keywords)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type InsertProcessedQuestionParams struct {
	Title           string
	Question        string
	MultipleChoices string
	CorrectAnswer   string
	Explanation     pgtype.Text
	Keywords        pgtype.Text
}

func (q *Queries) InsertProcessedQuestion(ctx context.Context, arg InsertProcessedQuestionParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertProcessedQuestion,
		arg.Title,
		arg.Question,
		arg.MultipleChoices,
		arg.CorrectAnswer,
		arg.Explanation,
		arg.Keywords,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertRawQuestion = `-- name: InsertRawQuestion :one
INSERT INTO raw_questions (title, raw_question, link)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertRawQuestionParams struct {
	Title       string
	RawQuestion string
	Link        pgtype.Text
}

func (q *Queries) InsertRawQuestion(ctx context.Context, arg InsertRawQuestionParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertRawQuestion, arg.Title, arg.RawQuestion, arg.Link)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateProcessedQuestion = `-- name: UpdateProcessedQuestion :one
UPDATE processed_questions
SET title = $1, question = $2, multiple_choices = $3, correct_answer = $4, explanation = $5, keywords = $6
WHERE id = $7
RETURNING id
`

type UpdateProcessedQuestionParams struct {
	Title           string
	Question        string
	MultipleChoices string
	CorrectAnswer   string
	Explanation     pgtype.Text
	Keywords        pgtype.Text
	ID              int32
}

func (q *Queries) UpdateProcessedQuestion(ctx context.Context, arg UpdateProcessedQuestionParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateProcessedQuestion,
		arg.Title,
		arg.Question,
		arg.MultipleChoices,
		arg.CorrectAnswer,
		arg.Explanation,
		arg.Keywords,
		arg.ID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateRawQuestion = `-- name: UpdateRawQuestion :one
UPDATE raw_questions
SET title = $1, raw_question = $2, link = $3
WHERE id = $4
RETURNING id
`

type UpdateRawQuestionParams struct {
	Title       string
	RawQuestion string
	Link        pgtype.Text
	ID          int32
}

func (q *Queries) UpdateRawQuestion(ctx context.Context, arg UpdateRawQuestionParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateRawQuestion,
		arg.Title,
		arg.RawQuestion,
		arg.Link,
		arg.ID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
